set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

include(FetchContent)
FetchContent_Declare(
  Catch2
  GIT_REPOSITORY https://github.com/catchorg/Catch2.git
  GIT_TAG v3.4.0)

FetchContent_MakeAvailable(Catch2)

add_executable(slot_test slot.cpp)
target_link_libraries(slot_test PRIVATE slot Catch2::Catch2WithMain)

add_executable(log_test log_test.cpp)
target_link_libraries(log_test PRIVATE common)

find_package(Threads REQUIRED)
add_executable(thread1 thread/thread1.cpp)
target_link_libraries(thread1 PRIVATE Threads::Threads common)
add_executable(thread2 thread/thread2.cpp)
target_link_libraries(thread2 PRIVATE Threads::Threads common)
add_executable(async1 thread/async1.cpp)
target_link_libraries(async1 PRIVATE Threads::Threads common)
add_executable(async2 thread/async2.cpp)
target_link_libraries(async2 PRIVATE Threads::Threads common)
add_executable(promise thread/promise.cpp)
target_link_libraries(promise PRIVATE Threads::Threads common)
add_executable(future thread/future.cpp)
target_link_libraries(future PRIVATE Threads::Threads common)
add_executable(lock1 thread/lock1.cpp)
target_link_libraries(lock1 PRIVATE Threads::Threads common)
add_executable(lock2 thread/lock2.cpp)
target_link_libraries(lock2 PRIVATE Threads::Threads common)
add_executable(lock3 thread/lock3.cpp)
target_link_libraries(lock3 PRIVATE Threads::Threads common)
add_executable(lock4 thread/lock4.cpp)
target_link_libraries(lock4 PRIVATE Threads::Threads common)
add_executable(lock5 thread/lock5.cpp)
target_link_libraries(lock5 PRIVATE Threads::Threads common)
add_executable(lock6 thread/lock6.cpp)
target_link_libraries(lock6 PRIVATE Threads::Threads common)
add_executable(lock7 thread/lock7.cpp)
target_link_libraries(lock7 PRIVATE Threads::Threads common)
add_executable(lock8 thread/lock8.cpp)
target_link_libraries(lock8 PRIVATE Threads::Threads common)
add_executable(lock9 thread/lock9.cpp)
target_link_libraries(lock9 PRIVATE Threads::Threads common)
add_executable(vec1 thread/vec1.cpp)
target_link_libraries(vec1 PRIVATE Threads::Threads common)
add_executable(vec2 thread/vec2.cpp)
target_link_libraries(vec2 PRIVATE Threads::Threads common)
add_executable(vec3 thread/vec3.cpp)
target_link_libraries(vec3 PRIVATE Threads::Threads common)
add_executable(condition1 thread/condition1.cpp)
target_link_libraries(condition1 PRIVATE Threads::Threads common)
add_executable(condition2 thread/condition2.cpp)
target_link_libraries(condition2 PRIVATE Threads::Threads common)
add_executable(condition3 thread/condition3.cpp)
target_link_libraries(condition3 PRIVATE Threads::Threads common)
add_executable(condition4 thread/condition4.cpp)
target_link_libraries(condition4 PRIVATE Threads::Threads common)
add_executable(condition5 thread/condition5.cpp)
target_link_libraries(condition5 PRIVATE Threads::Threads common)
add_executable(atomic1 thread/atomic1.cpp)
target_link_libraries(atomic1 PRIVATE Threads::Threads common)
add_executable(atomic2 thread/atomic2.cpp)
target_link_libraries(atomic2 PRIVATE Threads::Threads common)
add_executable(atomic3 thread/atomic3.cpp)
target_link_libraries(atomic3 PRIVATE Threads::Threads common)
add_executable(atomic4 thread/atomic4.cpp)
target_link_libraries(atomic4 PRIVATE Threads::Threads common)
add_executable(atomic5 thread/atomic5.cpp)
target_link_libraries(atomic5 PRIVATE Threads::Threads common)

include(Catch)
catch_discover_tests(slot_test)
